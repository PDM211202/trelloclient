import React, { useEffect, useState } from 'react'
import { useDispatch, useSelector } from 'react-redux';
import { UpdateWorkspaceNameApi, DeleteMemberApi, AddMemberApi, UpdateWorkspaceDeletePrivateApi, UpdateWorkspaceDeleteProtectedApi, UpdateWorkspaceDeletePublicApi, UpdateWorkspacePublicApi, UpdateWorkspaceProtectedApi, CreateProjectApi, UpdateWorkspacePrivateApi, UserApi, WorkspaceManagerApi, setProjectId, setWsId, MemberApi } from '../../redux/reducer/trelloReducer';
import { NavLink } from 'react-router-dom';

export default function Workspace() {
    const dispatch = useDispatch();
    const { user, workspace_manager, workspace, project, wsId, member_all, member, member_user, background } = useSelector(state => state.trelloReducer)
    const [showLimitCreation, setShowLimitCreation] = useState(false);
    const [showLimitDelete, setShowLimitDelete] = useState(false);
    const [isEditing, setIsEditing] = useState(false);
    const [workspaceName, setWorkspaceName] = useState(workspace.working_space_name);
    const [showModal, setShowModal] = useState(false);
    const [currentBg, setCurrentBg] = useState();
    const [projectTitle, setProjectTitle] = useState("");
    const [projectStatus, setProjectStatus] = useState("Kh√¥ng gian l√†m vi·ªác");
    const [selectedWorkspaceId, setSelectedWorkspaceId] = useState(``);
    const [userEmail, setUserEmail] = useState('');
    const [inputValue, setInputValue] = useState('');

    const handleSubmit = async (event) => {
        event.preventDefault();
        // G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t t√™n kh√¥ng gian l√†m vi·ªác
        dispatch(UpdateWorkspaceNameApi(workspace_manager));
    };

    const handleLeaveClick = (mu) => {
        dispatch(DeleteMemberApi(mu));
    }

    const handleAddMember = async () => {
        dispatch(AddMemberApi(userEmail, wsId))
    };

    const handleCloseModal = () => {
        setShowModal(false);
    };

    const handleButtonClick = async (wsId) => {
        dispatch(setWsId(wsId));
        setShowModal(true);
    }

    useEffect(() => {
        const handleClickOutside = (event) => {
            if (showModal && !event.target.closest('.create_project')) {
                handleCloseModal();
            }
        };

        document.addEventListener('mousedown', handleClickOutside);
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [showModal]);

    const handleWorkspaceChange = (event) => {
        setSelectedWorkspaceId(event.target.value);
    };

    const handleStatusChange = (event) => {
        setProjectStatus(event.target.value);
    };

    const handleToggleLimitCreation = () => {
        setShowLimitCreation(prevState => !prevState);
    };

    const handleToggleLimitDelete = () => {
        setShowLimitDelete(prevState => !prevState);
    };

    useEffect(() => {
        const handleClickOutside = (event) => {
            if (showLimitCreation && !event.target.closest('.create_project')) {
                setShowLimitCreation(false);
            }
        };

        document.addEventListener('mousedown', handleClickOutside);
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [showLimitCreation]);

    useEffect(() => {
        const handleClickOutside = (event) => {
            if (showLimitDelete && !event.target.closest('.create_project')) {
                setShowLimitDelete(false);
            }
        };

        document.addEventListener('mousedown', handleClickOutside);
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [showLimitDelete]);

    const handleBgChange = (newBg) => {
        setCurrentBg(newBg);
    };

    const createProject = () => {
        dispatch(CreateProjectApi(selectedWorkspaceId, projectTitle, currentBg, projectStatus))
    };

    const handleSetProjectId = async (pId, wsId) => {
        dispatch(setProjectId(pId));
        dispatch(setWsId(wsId));
    }

    const handleUpdateWsPublic = async (wsId, status) => {
        dispatch(UpdateWorkspacePublicApi(wsId, status));
    }

    const handleUpdateWsProtected = async (wsId, status) => {
        dispatch(UpdateWorkspaceProtectedApi(wsId, status));
    }

    const handleUpdateWsPrivate = async (wsId, status) => {
        dispatch(UpdateWorkspacePrivateApi(wsId, status));
    }

    const handleUpdateWsDeletePublic = async (wsId, status) => {
        dispatch(UpdateWorkspaceDeletePublicApi(wsId, status));
    }

    const handleUpdateWsDeleteProtected = async (wsId, status) => {
        dispatch(UpdateWorkspaceDeleteProtectedApi(wsId, status));
    }

    const handleUpdateWsDeletePrivate = async (wsId, status) => {
        dispatch(UpdateWorkspaceDeletePrivateApi(wsId, status));
    }

    useEffect(() => {
        if (wsId) {
            const actionWorkspaceManager = WorkspaceManagerApi(wsId)
            dispatch(actionWorkspaceManager)
        }
    }, [dispatch])

    useEffect(() => {
        if (wsId) {
            const actionMember = MemberApi(wsId)
            dispatch(actionMember)
        }
    }, [dispatch])

    useEffect(() => {
        if (member) {
            const actionUser = UserApi()
            dispatch(actionUser)
        }
    }, [dispatch])


    const renderAddMemberModal = () => {
        return <div className="modal fade" id="AddMemberModal" tabIndex={-1} aria-labelledby="AddMemberModalLabel" aria-hidden="true">
            <div className="modal-dialog">
                <div className="modal-content">
                    <div className="modal-header">
                        <h5 className="modal-title" id="AddMemberModalLabel">M·ªùi v√†o kh√¥ng gian l√†m vi·ªác</h5>
                        <button type="button" className="btn-close" data-bs-dismiss="modal" aria-label="Close" />
                    </div>
                    <div className="modal-body">
                        <input type="text" name="user_name" value={userEmail}
                            onChange={(e) => setUserEmail(e.target.value)} placeholder="ƒê·ªãa ch·ªâ email ho·∫∑c t√™n" />
                    </div>
                    <div className="modal-footer">
                        <button type="button" className="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" className="btn btn-primary" data-bs-dismiss="modal" onClick={handleAddMember}>Th√™m</button>
                    </div>
                </div>
            </div>
        </div>
    }

    const renderWorkspaceOption = () => {
        return member_all.map((m, index) => {
            if (m.user_id == user.user_id) {
                return workspace.map((ws, index) => {
                    if (ws.working_space_id === m.working_space_id) {
                        return <option value={ws.working_space_id}>{ws.working_space_name}</option>
                    }
                })
            }
        })
    }

    const renderListBackground = () => {
        return background.map((bg, index) => {
            return <li key={index} onClick={() => handleBgChange(bg.background_src)} className='col-3 list_background_item mb-2'>
                <img style={{ width: "100%" }} src={bg.background_src} alt="" />
            </li>
        })
    }

    const renderCreateProjectModal = () => {
        if (!showModal) return null;
        return <div className="create_project">
            <div className="create_project_header">
                <h2 className='create_project_header_title'>
                    T·∫°o b·∫£ng
                </h2>
                <button onClick={handleCloseModal} className='create_project_header_close'>
                    <i className="fa fa-times"></i>
                </button>
            </div>
            <div className="create_project_content">
                <div className="kaGQXLXBcM0_mi">
                    <div className="U3cJFwAMTWKgYO" style={{ backgroundImage: `url(${currentBg})` }}>
                        <img src="https://trello.com/assets/14cda5dc635d1f13bc48.svg" alt="#" />
                    </div>
                </div>
                <div className="eCkm4CfIIzzW4L">
                    <div>
                        <span>Ph√¥ng n·ªÅn</span>
                    </div>
                    <div className="background">
                        <ul className='row list_background'>
                            {renderListBackground()}
                        </ul>
                    </div>
                    <form>
                        <div>
                            <label className='fMvxkh4DHKJGnq'>
                                <div>
                                    Ti√™u ƒë·ªÅ b·∫£ng
                                    <span className='bKPMIrxAJqgHwG'>*</span>
                                </div>
                                <input type="text" className='lsOhPsHuxEMYEb' value={projectTitle}
                                    onChange={(e) => setProjectTitle(e.target.value)} />
                            </label>
                        </div>
                        <div className="AOsf5x5baMpD1a">
                            <span role="img" aria-label="wave" class="O45xR3m3EpkbfR">üëã</span>
                            <p>Ti√™u ƒë·ªÅ b·∫£ng l√† b·∫Øt bu·ªôc</p>
                        </div>
                        <label className='fMvxkh4DHKJGnq'>Kh√¥ng gian l√†m vi·ªác</label>
                        <div>
                            <div className="input-group mb-3">
                                <select onChange={handleWorkspaceChange} value={selectedWorkspaceId} className="form-select" id="inputGroupSelect01">
                                    {renderWorkspaceOption()}
                                </select>
                            </div>
                        </div>
                        <label className='fMvxkh4DHKJGnq'>Quy·ªÅn xem</label>
                        <div>
                            <div className="input-group mb-3">
                                <select onChange={handleStatusChange} className="form-select" id="inputGroupSelect01">
                                    {renderWorkspaceProtected()}
                                    {renderWorkspacePrivate()}
                                    {renderWorkspacePublic()}
                                </select>
                            </div>
                        </div>
                    </form>
                    <button className={`hY6kPzdkHFJhfG ${projectTitle ? "active" : ""}`}
                        onClick={createProject}
                        disabled={!projectTitle}>
                        T·∫°o m·ªõi
                    </button>
                </div>
            </div>
        </div>
    }

    const renderWorkspacePublic = () => {
        let mb;
        member.forEach((item) => {
            if (item.user_id == user.user_id) {
                mb = item
            }
        })
        return workspace.map((ws, index) => {
            if (ws.working_space_id == wsId) {
                if (ws.working_space_public === 2) {
                    return null;
                }
                if (ws.working_space_public === 1 && mb.member_role === 'Qu·∫£n tr·ªã vi√™n') {
                    return <option value={"C√¥ng khai"}>C√¥ng khai</option>
                }
                if (ws.working_space_public === 1 && mb.member_role === 'B√¨nh th∆∞·ªùng') {
                    return null;
                }
                if (ws.working_space_public === 0) {
                    return <option value={"C√¥ng khai"}>C√¥ng khai</option>
                }
            }
        })
    }

    const renderWorkspaceProtected = () => {
        let mb;
        member.forEach((item) => {
            if (item.user_id == user.user_id) {
                mb = item
            }
        })
        return workspace.map((ws, index) => {
            if (ws.working_space_id == wsId) {
                if (ws.working_space_protected === 2) {
                    return null;
                }
                if (ws.working_space_protected === 1 && mb.member_role === 'Qu·∫£n tr·ªã vi√™n') {
                    return <option value={"Kh√¥ng gian l√†m vi·ªác"}>Kh√¥ng gian l√†m vi·ªác</option>
                }
                if (ws.working_space_protected === 1 && mb.member_role === 'B√¨nh th∆∞·ªùng') {
                    return null;
                }
                if (ws.working_space_protected === 0) {
                    return <option value={"Kh√¥ng gian l√†m vi·ªác"}>Kh√¥ng gian l√†m vi·ªác</option>
                }
            }
        })
    }

    const renderWorkspacePrivate = () => {
        let mb;
        member.forEach((item) => {
            if (item.user_id == user.user_id) {
                mb = item
            }
        })
        return workspace.map((ws, index) => {
            if (ws.working_space_id == wsId) {
                if (ws.working_space_private === 2) {
                    return null;
                }
                if (ws.working_space_private === 1 && mb.member_role === 'Qu·∫£n tr·ªã vi√™n') {
                    return <option value={"Ri√™ng t∆∞"}>Ri√™ng t∆∞</option>
                }
                if (ws.working_space_private === 1 && mb.member_role === 'B√¨nh th∆∞·ªùng') {
                    return null;
                }
                if (ws.working_space_private === 0) {
                    return <option value={"Ri√™ng t∆∞"}>Ri√™ng t∆∞</option>
                }
            }
        })
    }

    const renderProjectitem = (wsId) => {
        return project.map((p, index) => {
            if (wsId == p.working_space_id) {
                return <div style={{ backgroundImage: `url(${p.project_background_src})` }} className="project_item col-4">
                    <NavLink onClick={() => { handleSetProjectId(p.project_id, p.working_space_id) }} to="/project" className="project_name">
                        {p.project_name}
                    </NavLink>
                </div>
            }
        })
    }

    const renderProjectMenuitem = (wsId) => {
        return project.map((p, index) => {
            if (wsId == p.working_space_id) {
                return <li style={{ backgroundColor: "#fff" }} className="list-group-item-p" aria-current="true">
                    <NavLink to="/project" style={{ color: '#000', textDecoration: 'none' }}>
                        <img className='me-2' src="./img/logo.png" />
                        {p.project_name}
                    </NavLink>
                </li>
            }
        })
    }

    const renderBtnUserRole = (userId) => {

        return member.map((mb, index) => {
            if (mb.user_id == userId) {
                return <button key={index} type="button" className="btn btn-primary me-2">
                    {mb.member_role}
                </button>
            }
        })
    }

    const renderMemberList = () => {
        return member_user.map((mu, index) => {
            return member.map((item, index) => {
                const isAdmin = item.member_role === "Qu·∫£n tr·ªã vi√™n";
                if (mu.user_id === item.user_id) {
                    return <div key={index} className="member_list mb-3 row">
                        <div className="member_item_left d-flex col">
                            <div className="logo_user">
                                <img src={mu.user_background_avatar_src} />
                            </div>
                            <div className="name_user">
                                <p>{mu.user_name}</p>
                                <span>{mu.user_email}</span>
                            </div>
                        </div>
                        <div className="member_item_right col">
                            {renderBtnUserRole(mu.user_id)}
                            <button type="button" className={`btn ${isAdmin ? "btn-danger" : "btn-secondary"}`}
                                onClick={isAdmin ? () => { handleLeaveClick(item) } : null}
                                disabled={!isAdmin}>
                                <i className="fa fa-times" />
                                R·ªùi ƒëi
                            </button>
                        </div>
                    </div>
                }
            })
        })
    }

    const renderLimitCreation = (wsId) => {
        if (!showLimitCreation) return null;
        return <div className="create_project">
            <div className="create_project_header">
                <h2 className='create_project_header_title'>
                    Ch√≠nh S√°ch H·∫°n Ch·∫ø T·∫°o B·∫£ng
                </h2>
                <button onClick={handleToggleLimitCreation} className='create_project_header_close'>
                    <i className="fa fa-times"></i>
                </button>
            </div>
            <div className="create_project_content">
                <div className="eCkm4CfIIzzW4L">
                    <div>
                        <span>Ai c√≥ th·ªÉ t·∫°o c√°c b·∫£ng c√¥ng khai?</span>
                    </div>
                    <ul className="list_group_public">
                        <li onClick={() => { handleUpdateWsPublic(wsId, "0") }} className="list_group_public_item d-flex ">
                            <i class="fa fa-check"></i>
                            <p>M·ªçi th√†nh vi√™n Kh√¥ng gian l√†m vi·ªác</p>
                        </li>
                        <li onClick={() => { handleUpdateWsPublic(wsId, "1") }} className="list_group_public_item d-flex ">
                            <i class="fa fa-check"></i>
                            <p>Ch·ªâ c√°c qu·∫£n tr·ªã vi√™n Kh√¥ng gian l√†m vi·ªác</p>
                        </li>
                        <li onClick={() => { handleUpdateWsPublic(wsId, "2") }} className="list_group_public_item d-flex ">
                            <i class="fa fa-check"></i>
                            <p>Kh√¥ng ai</p>
                        </li>
                    </ul>
                    <div className="line"></div>
                    <div>
                        <span>Ai c√≥ th·ªÉ t·∫°o c√°c b·∫£ng hi·ªÉn th·ªã trong Kh√¥ng gian l√†m vi·ªác?</span>
                    </div>
                    <ul className="list_group_public">
                        <li onClick={() => { handleUpdateWsProtected(wsId, "0") }} className="list_group_public_item d-flex ">
                            <i class="fa fa-check"></i>
                            <p>M·ªçi th√†nh vi√™n Kh√¥ng gian l√†m vi·ªác</p>
                        </li>
                        <li onClick={() => { handleUpdateWsProtected(wsId, "1") }} className="list_group_public_item d-flex ">
                            <i class="fa fa-check"></i>
                            <p>Ch·ªâ c√°c qu·∫£n tr·ªã vi√™n Kh√¥ng gian l√†m vi·ªác</p>
                        </li>
                        <li onClick={() => { handleUpdateWsProtected(wsId, "2") }} className="list_group_public_item d-flex ">
                            <i class="fa fa-check"></i>
                            <p>Kh√¥ng ai</p>
                        </li>
                    </ul>
                    <div className="line"></div>
                    <div>
                        <span>Ai c√≥ th·ªÉ t·∫°o b·∫£ng ri√™ng t∆∞?</span>
                    </div>
                    <ul className="list_group_public">
                        <li onClick={() => { handleUpdateWsPrivate(wsId, "0") }} className="list_group_public_item d-flex ">
                            <i class="fa fa-check"></i>
                            <p>M·ªçi th√†nh vi√™n Kh√¥ng gian l√†m vi·ªác</p>
                        </li>
                        <li onClick={() => { handleUpdateWsPrivate(wsId, "1") }} className="list_group_public_item d-flex ">
                            <i class="fa fa-check"></i>
                            <p>Ch·ªâ c√°c qu·∫£n tr·ªã vi√™n Kh√¥ng gian l√†m vi·ªác</p>
                        </li>
                        <li onClick={() => { handleUpdateWsPrivate(wsId, "2") }} className="list_group_public_item d-flex ">
                            <i class="fa fa-check"></i>
                            <p>Kh√¥ng ai</p>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    }

    const renderLimitDelete = (wsId) => {
        if (!showLimitDelete) return null;

        return <div className="create_project">
            <div className="create_project_header">
                <h2 className='create_project_header_title'>
                    Ch√≠nh S√°ch H·∫°n Ch·∫ø X√≥a B·∫£ng
                </h2>
                <button onClick={handleToggleLimitCreation} className='create_project_header_close'>
                    <i className="fa fa-times"></i>
                </button>
            </div>
            <div className="create_project_content">
                <div className="eCkm4CfIIzzW4L">
                    <div>
                        <span>Ai c√≥ th·ªÉ t·∫°o x√≥a b·∫£ng c√¥ng khai?</span>
                    </div>
                    <ul className="list_group_public">
                        <li onClick={() => { handleUpdateWsDeletePublic(wsId, "0") }} className="list_group_public_item d-flex ">
                            <i class="fa fa-check"></i>
                            <p>M·ªçi th√†nh vi√™n Kh√¥ng gian l√†m vi·ªác</p>
                        </li>
                        <li onClick={() => { handleUpdateWsDeletePublic(wsId, "1") }} className="list_group_public_item d-flex ">
                            <i class="fa fa-check"></i>
                            <p>Ch·ªâ c√°c qu·∫£n tr·ªã vi√™n Kh√¥ng gian l√†m vi·ªác</p>
                        </li>
                        <li onClick={() => { handleUpdateWsDeletePublic(wsId, "2") }} className="list_group_public_item d-flex ">
                            <i class="fa fa-check"></i>
                            <p>Kh√¥ng ai</p>
                        </li>
                    </ul>
                    <div className="line"></div>
                    <div>
                        <span>Ai c√≥ th·ªÉ x√≥a c√°c b·∫£ng hi·ªÉn th·ªã trong Kh√¥ng gian l√†m vi·ªác?</span>
                    </div>
                    <ul className="list_group_public">
                        <li onClick={() => { handleUpdateWsDeleteProtected(wsId, "0") }} className="list_group_public_item d-flex ">
                            <i class="fa fa-check"></i>
                            <p>M·ªçi th√†nh vi√™n Kh√¥ng gian l√†m vi·ªác</p>
                        </li>
                        <li onClick={() => { handleUpdateWsDeleteProtected(wsId, "1") }} className="list_group_public_item d-flex ">
                            <i class="fa fa-check"></i>
                            <p>Ch·ªâ c√°c qu·∫£n tr·ªã vi√™n Kh√¥ng gian l√†m vi·ªác</p>
                        </li>
                        <li onClick={() => { handleUpdateWsDeleteProtected(wsId, "2") }} className="list_group_public_item d-flex ">
                            <i class="fa fa-check"></i>
                            <p>Kh√¥ng ai</p>
                        </li>
                    </ul>
                    <div className="line"></div>
                    <div>
                        <span>Ai c√≥ th·ªÉ x√≥a b·∫£ng ri√™ng t∆∞?</span>
                    </div>
                    <ul className="list_group_public">
                        <li onClick={() => { handleUpdateWsDeletePrivate(wsId, "0") }} className="list_group_public_item d-flex ">
                            <i class="fa fa-check"></i>
                            <p>M·ªçi th√†nh vi√™n Kh√¥ng gian l√†m vi·ªác</p>
                        </li>
                        <li onClick={() => { handleUpdateWsDeletePrivate(wsId, "1") }} className="list_group_public_item d-flex ">
                            <i class="fa fa-check"></i>
                            <p>Ch·ªâ c√°c qu·∫£n tr·ªã vi√™n Kh√¥ng gian l√†m vi·ªác</p>
                        </li>
                        <li onClick={() => { handleUpdateWsDeletePrivate(wsId, "2") }} className="list_group_public_item d-flex ">
                            <i class="fa fa-check"></i>
                            <p>Kh√¥ng ai</p>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    }

    const renderTitleDeleteWsPublic = () => {
        if (workspace_manager.working_space_delete_public === 2) {
            return <p className='mb-2'>
                Kh√¥ng ai c√≥ th·ªÉ x√≥a <i style={{ color: "green" }} class="fa fa-globe-americas"></i> c√°c b·∫£ng c√¥ng khai.
            </p>
        }
        if (workspace_manager.working_space_delete_public === 1) {
            return <p className='mb-2'>
                Ch·ªâ c√°c qu·∫£n tr·ªã vi√™n Kh√¥ng gian l√†m vi·ªác m·ªõi c√≥ th·ªÉ x√≥a <i style={{ color: "green" }} class="fa fa-globe-americas"></i> c√°c b·∫£ng c√¥ng khai.
            </p>
        }
        if (workspace_manager.working_space_delete_public === 0) {
            return <p className='mb-2'>
                B·∫•t k·ª≥ th√†nh vi√™n Kh√¥ng gian l√†m vi·ªác n√†o c≈©ng c√≥ th·ªÉ x√≥a <i style={{ color: "green" }} class="fa fa-globe-americas"></i> c√°c b·∫£ng c√¥ng khai.
            </p>
        }
    }

    const renderTitleDeleteWsProtected = () => {
        if (workspace_manager.working_space_delete_protected === 2) {
            return <p className='mb-2'>
                Kh√¥ng ai c√≥ th·ªÉ x√≥a <i style={{ color: "orange" }} class="fa fa-user-friends"></i> c√°c b·∫£ng hi·ªÉn th·ªã trong Kh√¥ng gian l√†m vi·ªác.
            </p>
        }
        if (workspace_manager.working_space_delete_protected === 1) {
            return <p className='mb-2'>
                Ch·ªâ c√°c qu·∫£n tr·ªã vi√™n Kh√¥ng gian l√†m vi·ªác m·ªõi c√≥ th·ªÉ x√≥a <i style={{ color: "orange" }} class="fa fa-user-friends"></i> c√°c b·∫£ng hi·ªÉn th·ªã trong Kh√¥ng gian l√†m vi·ªác.
            </p>
        }
        if (workspace_manager.working_space_delete_protected === 0) {
            return <p className='mb-2'>
                B·∫•t k·ª≥ th√†nh vi√™n Kh√¥ng gian l√†m vi·ªác n√†o c≈©ng c√≥ th·ªÉ x√≥a <i style={{ color: "orange" }} class="fa fa-user-friends"></i> c√°c b·∫£ng hi·ªÉn th·ªã trong Kh√¥ng gian l√†m vi·ªác.
            </p>
        }
    }

    const renderTitleDeleteWsPrivate = () => {
        if (workspace_manager.working_space_delete_private === 2) {
            return <p className='mb-2'>
                Kh√¥ng ai c√≥ th·ªÉ x√≥a <i style={{ color: "red" }} class="fa fa-lock"></i> c√°c b·∫£ng ri√™ng t∆∞.
            </p>
        }
        if (workspace_manager.working_space_delete_private === 1) {
            return <p className='mb-2'>
                Ch·ªâ c√°c qu·∫£n tr·ªã vi√™n Kh√¥ng gian l√†m vi·ªác m·ªõi c√≥ th·ªÉ x√≥a <i style={{ color: "red" }} class="fa fa-lock"></i> c√°c b·∫£ng ri√™ng t∆∞.
            </p>
        }
        if (workspace_manager.working_space_delete_private === 0) {
            return <p className='mb-2'>
                B·∫•t k·ª≥ th√†nh vi√™n Kh√¥ng gian l√†m vi·ªác n√†o c≈©ng c√≥ th·ªÉ x√≥a <i style={{ color: "red" }} class="fa fa-lock"></i> c√°c b·∫£ng ri√™ng t∆∞.
            </p>
        }
    }

    const renderTitleCreateWsPublic = () => {
        if (workspace_manager.working_space_public === 2) {
            return <p className='mb-2'>
                Kh√¥ng ai c√≥ th·ªÉ t·∫°o <i style={{ color: "green" }} class="fa fa-globe-americas"></i> c√°c b·∫£ng c√¥ng khai.
            </p>
        }
        if (workspace_manager.working_space_public === 1) {
            return <p className='mb-2'>
                Ch·ªâ c√°c qu·∫£n tr·ªã vi√™n Kh√¥ng gian l√†m vi·ªác m·ªõi c√≥ th·ªÉ t·∫°o <i style={{ color: "green" }} class="fa fa-globe-americas"></i> c√°c b·∫£ng c√¥ng khai.
            </p>
        }
        if (workspace_manager.working_space_public === 0) {
            return <p className='mb-2'>
                B·∫•t k·ª≥ th√†nh vi√™n Kh√¥ng gian l√†m vi·ªác n√†o c≈©ng c√≥ th·ªÉ t·∫°o <i style={{ color: "green" }} class="fa fa-globe-americas"></i> c√°c b·∫£ng c√¥ng khai.
            </p>
        }
    }

    const renderTitleCreateWsProtected = () => {
        if (workspace_manager.working_space_protected === 2) {
            return <p className='mb-2'>
                Kh√¥ng ai c√≥ th·ªÉ t·∫°o <i style={{ color: "orange" }} class="fa fa-user-friends"></i> c√°c b·∫£ng hi·ªÉn th·ªã trong Kh√¥ng gian l√†m vi·ªác.
            </p>
        }
        if (workspace_manager.working_space_protected === 1) {
            return <p className='mb-2'>
                Ch·ªâ c√°c qu·∫£n tr·ªã vi√™n Kh√¥ng gian l√†m vi·ªác m·ªõi c√≥ th·ªÉ t·∫°o <i style={{ color: "orange" }} class="fa fa-user-friends"></i> c√°c b·∫£ng hi·ªÉn th·ªã trong Kh√¥ng gian l√†m vi·ªác.
            </p>
        }
        if (workspace_manager.working_space_protected === 0) {
            return <p className='mb-2'>
                B·∫•t k·ª≥ th√†nh vi√™n Kh√¥ng gian l√†m vi·ªác n√†o c≈©ng c√≥ th·ªÉ t·∫°o <i style={{ color: "orange" }} class="fa fa-user-friends"></i> c√°c b·∫£ng hi·ªÉn th·ªã trong Kh√¥ng gian l√†m vi·ªác.
            </p>
        }
    }

    const renderTitleCreateWsPrivate = () => {
        if (workspace_manager.working_space_private === 2) {
            return <p className='mb-2'>
                Kh√¥ng ai c√≥ th·ªÉ t·∫°o <i style={{ color: "red" }} class="fa fa-lock"></i> c√°c b·∫£ng ri√™ng t∆∞.
            </p>
        }
        if (workspace_manager.working_space_private === 1) {
            return <p className='mb-2'>
                Ch·ªâ c√°c qu·∫£n tr·ªã vi√™n Kh√¥ng gian l√†m vi·ªác m·ªõi c√≥ th·ªÉ t·∫°o <i style={{ color: "red" }} class="fa fa-lock"></i> c√°c b·∫£ng ri√™ng t∆∞.
            </p>
        }
        if (workspace_manager.working_space_private === 0) {
            return <p className='mb-2'>
                B·∫•t k·ª≥ th√†nh vi√™n Kh√¥ng gian l√†m vi·ªác n√†o c≈©ng c√≥ th·ªÉ t·∫°o <i style={{ color: "red" }} class="fa fa-lock"></i> c√°c b·∫£ng ri√™ng t∆∞.
            </p>
        }
    }

    const renderDeleteWorkSpaceModal = (ws) => {
        const handleSubmit = async (event) => {
            event.preventDefault();
            if (inputValue === ws.working_space_name) {

            }
        };

        const isButtonDisabled = inputValue !== ws.working_space_name;

        return <div className="modal fade" id="DeleteWorkSpaceModal" tabIndex={-1} aria-labelledby="DeleteWorkSpaceModalLabel" aria-hidden="true">
            <div className="modal-dialog">
                <div className="modal-content">
                    <div className="modal-header">
                        <h5 className="modal-title" id="DeleteWorkSpaceModalLabel">X√≥a kh√¥ng gian l√†m vi·ªác?</h5>
                        <button type="button" className="btn-close" data-bs-dismiss="modal" aria-label="Close" />
                    </div>
                    <div className="modal-body">
                        <h4>Nh·∫≠p t√™n kh√¥ng gian l√†m vi·ªác {ws.working_space_name} ƒë·ªÉ x√≥a</h4>
                        <span>Nh·ªØng ƒëi·ªÅu c·∫ßn bi·∫øt:</span>
                        <ul>
                            <li>ƒêi·ªÅu n√†y l√† vƒ©nh vi·ªÖn v√† kh√¥ng th·ªÉ ho√†n t√°c.</li>
                            <li>T·∫•t c·∫£ c√°c b·∫£ng trong Kh√¥ng gian l√†m vi·ªác n√†y s·∫Ω b·ªã ƒë√≥ng.</li>
                            <li>C√°c qu·∫£n tr·ªã vi√™n b·∫£ng c√≥ th·ªÉ m·ªü l·∫°i c√°c b·∫£ng.</li>
                            <li>C√°c th√†nh vi√™n b·∫£ng s·∫Ω kh√¥ng th·ªÉ t∆∞∆°ng t√°c v·ªõi c√°c b·∫£ng ƒë√£ ƒë√≥ng.</li>
                        </ul>
                        <span>Nh·∫≠p t√™n kh√¥ng gian l√†m vi·ªác ƒë·ªÉ x√≥a</span>
                        <form onSubmit={handleSubmit}>
                            <input type="text" name="workspace_name" value={inputValue} onChange={(e) => setInputValue(e.target.value)} />
                            <button type="submit" className={`btn ${isButtonDisabled ? 'btn-secondary' : 'btn-danger'}`} disabled={isButtonDisabled}>
                                X√≥a kh√¥ng gian l√†m vi·ªác
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    }

    return (
        <div>
            <div className="container-fluid">
                <div className="row">
                    <nav className="menu p-0 col" style={{ backgroundColor: "#fff" }}>
                        <div className="menu__header">
                            <div className="menu__header__left">
                                <img src="./img/logo.png" />
                            </div>
                            <div className="menu__header__mid">
                                <p>{user.user_name}</p>
                                <span>Mi·ªÖn ph√≠</span>
                            </div>
                            <div className="menu__header__right">
                                <div>
                                    <i className="fa fa-angle-left" />
                                </div>
                            </div>
                        </div>
                        <div className="menu__mid pt-1 mb-3">
                            <div className="menu__mid__item">
                                <i className="fa fa-table" />
                                <span>B·∫£ng</span>
                            </div>
                            <div className="menu__mid__item">
                                <i className="fa fa-user" />
                                <span>Th√†nh vi√™n</span>
                                <i className="fa fa-plus user__add" data-bs-toggle="modal" data-bs-target="#AddMemberModal" />
                            </div>
                            <div className="menu__mid__item">
                                <i className="fa fa-cog" />
                                <span>C√†i ƒë·∫∑t</span>
                            </div>
                        </div>
                        <div className="menu__bottom">
                            <div className="menu__bottom__title">
                                <p>C√°c b·∫£ng c·ªßa b·∫°n</p>
                                <i data-bs-toggle="modal" data-bs-target="#WorkSpaceModal" className="fa fa-plus" />
                            </div>
                            <ul className="list-group">
                                {renderProjectMenuitem(wsId)}
                            </ul>
                        </div>
                    </nav>
                    <div className="content col">
                        <div className="content_header row">
                            <div className="user_avatar col-2 p-0">
                                <img src="./img/logo.png" />
                            </div>
                            {!isEditing ? (
                                <div className="workspace_name col-5 d-flex">
                                    <h3>{workspace_manager.working_space_name}</h3>
                                    <i className="fa fa-edit edit_workspace" onClick={() => setIsEditing(true)} />
                                </div>
                            ) : (
                                <div className="workspace_update col-5">
                                    <form method="post" className="d-flex" onSubmit={handleSubmit}>
                                        <input type="text" name="ws_name" value={workspace_manager.working_space_name} onChange={(e) => setWorkspaceName(e.target.value)} />
                                        <div className="btn-option">
                                            <button type="submit" className="btn btn-primary">L∆∞u</button>
                                            <button type="button" className="btn close" onClick={() => setIsEditing(false)}>H·ªßy</button>
                                        </div>
                                    </form>
                                </div>
                            )}
                            <div className="add_member col-5">
                                <button type="button" className="btn btn-primary" data-bs-toggle="modal" data-bs-target="#AddMemberModal">
                                    <i className="fa fa-user-plus" />
                                    <span>M·ªùi c√°c th√†nh vi√™n v√†o Kh√¥ng gian l√†m vi·ªác</span>
                                </button>
                            </div>
                        </div>
                        <div id="board" className="list_project mt-5">
                            <h4 className="list_project_title mb-4">B·∫£ng</h4>
                            <div className="project_group row ">
                                <div onClick={() => { handleButtonClick(workspace_manager.working_space_id) }} className="project_item_create col-4">
                                    <span>T·∫°o b·∫£ng m·ªõi</span>
                                    {renderCreateProjectModal()}
                                </div>
                                {renderProjectitem(wsId)}
                            </div>
                        </div>
                        <div id="member" className="list_project mt-5">
                            <h4 className="list_member_title mb-4">Th√†nh vi√™n</h4>
                            <h4 className="list_member_title mb-4">C√°c th√†nh vi√™n trong kh√¥ng gian l√†m vi·ªác (1)</h4>
                            <p>C√°c th√†nh vi√™n trong Kh√¥ng gian l√†m vi·ªác c√≥ th·ªÉ xem v√† tham gia t·∫•t c·∫£ c√°c b·∫£ng Kh√¥ng gian l√†m
                                vi·ªác hi·ªÉn th·ªã v√† t·∫°o ra c√°c b·∫£ng m·ªõi trong Kh√¥ng gian l√†m vi·ªác.</p>
                            <div className="member_group">
                                {renderMemberList()}
                            </div>
                            <h4 className="list_member_title mb-4">Kh√°ch (0)</h4>
                            <p>Kh√°ch ch·ªâ c√≥ th·ªÉ xem v√† ch·ªânh s·ª≠a b·∫£ng m√† h·ªç ƒë∆∞·ª£c th√™m v√†o.</p>
                        </div>
                        <div id="setting" className="list_project mt-5">
                            <h4 className="list_setting_title mb-4">C√†i ƒë·∫∑t</h4>
                            <h4 className="list_member_title mb-4">C√°c c√†i ƒë·∫∑t kh√¥ng gian l√†m vi·ªác</h4>
                            <div className="setting_option_list">
                                <div className="setting_option_item mb-5">
                                    <button type="button" style={{ backgroundColor: "#091e420f", fontWeight: "500" }} class="btn">Thay ƒë·ªïi</button>
                                    <h4 style={{ fontSize: "16px" }} className="list_member_title mb-4">
                                        Kh·∫£ nƒÉng hi·ªÉn th·ªã trong Kh√¥ng gian l√†m vi·ªác
                                    </h4>
                                    <div className="line"></div>
                                    <p>
                                        Ri√™ng t∆∞ - ƒê√¢y l√† Kh√¥ng gian l√†m vi·ªác ri√™ng t∆∞. Ch·ªâ nh·ªØng ng∆∞·ªùi trong Kh√¥ng gian l√†m vi·ªác c√≥ th·ªÉ truy c·∫≠p ho·∫∑c nh√¨n th·∫•y Kh√¥ng gian l√†m vi·ªác.
                                    </p>
                                </div>
                                <div className="setting_option_item mb-5">
                                    <button type="button" style={{ backgroundColor: "#091e420f", fontWeight: "500" }} class="btn">Thay ƒë·ªïi</button>
                                    <h4 style={{ fontSize: "16px" }} className="list_member_title mb-4">
                                        Ch√≠nh s√°ch h·∫°n ch·∫ø t∆∞ c√°ch th√†nh vi√™n Kh√¥ng gian l√†m vi·ªác
                                    </h4>
                                    <div className="line"></div>
                                    <p>
                                        B·∫•t k·ª≥ ai c≈©ng c√≥ th·ªÉ ƒë∆∞·ª£c th√™m v√†o Kh√¥ng gian l√†m vi·ªác n√†y.
                                    </p>
                                </div>
                                <div className="setting_option_item mb-5">
                                    <button onClick={handleToggleLimitCreation} type="button" style={{ backgroundColor: "#091e420f", fontWeight: "500" }} class="btn">Thay ƒë·ªïi</button>
                                    <h4 style={{ fontSize: "16px" }} className="list_member_title mb-4">
                                        Ch√≠nh s√°ch h·∫°n ch·∫ø t·∫°o b·∫£ng
                                    </h4>
                                    {showLimitCreation && renderLimitCreation(wsId)}
                                    <div className="line"></div>
                                    {renderTitleCreateWsPublic()}
                                    {renderTitleCreateWsProtected()}
                                    {renderTitleCreateWsPrivate()}
                                </div>
                                <div className="setting_option_item mb-5">
                                    <button onClick={handleToggleLimitDelete} type="button" style={{ backgroundColor: "#091e420f", fontWeight: "500" }} class="btn">Thay ƒë·ªïi</button>
                                    <h4 style={{ fontSize: "16px" }} className="list_member_title mb-4">
                                        Ch√≠nh S√°ch H·∫°n Ch·∫ø X√≥a B·∫£ng
                                    </h4>
                                    {showLimitDelete && renderLimitDelete(wsId)}
                                    <div className="line"></div>
                                    {renderTitleDeleteWsPublic()}
                                    {renderTitleDeleteWsProtected()}
                                    {renderTitleDeleteWsPrivate()}
                                </div>
                                <div className="setting_option_item mb-5">
                                    <button type="button" style={{ backgroundColor: "#091e420f", fontWeight: "500" }} class="btn">Thay ƒë·ªïi</button>
                                    <h4 style={{ fontSize: "16px" }} className="list_member_title mb-4">
                                        Chia s·∫ª c√°c b·∫£ng v·ªõi kh√°ch
                                    </h4>
                                    <div className="line"></div>
                                    <p>
                                        B·∫•t k·ª≥ ai c≈©ng c√≥ th·ªÉ g·ª≠i ho·∫∑c nh·∫≠n l·ªùi m·ªùi tham gia c√°c b·∫£ng trong Kh√¥ng gian l√†m vi·ªác n√†y.
                                    </p>
                                </div>
                            </div>

                            {/* Button trigger modal */}
                            <button type="button" className="btn btn-danger" data-bs-toggle="modal" data-bs-target="#DeleteWorkSpaceModal">
                                X√≥a kh√¥ng gian l√†m vi·ªác n√†y?
                            </button>
                            {/* Modal */}
                            {renderDeleteWorkSpaceModal(workspace_manager)}
                        </div>
                    </div>
                </div>
            </div>
            {/* Modal */}
            {renderAddMemberModal()}
            {/* Modal */}
            <div className="modal fade" id="WorkSpaceModal" tabIndex={-1} aria-labelledby="WorkSpaceModalLabel" aria-hidden="true">
                <div className="modal-dialog">
                    <div className="modal-content">
                        <div className="modal-header">
                            <button type="button" className="btn-close" data-bs-dismiss="modal" aria-label="Close" />
                        </div>
                        <div className="modal-body">
                            <form method="post">
                                <h3>H√£y x√¢y d·ª±ng m·ªôt kh√¥ng gian l√†m vi·ªác</h3>
                                <p>T√™n kh√¥ng gian l√†m vi·ªác</p>
                                <input type="text" name="working_space_name" id placeholder="C√¥ng ty c·ªßa ..." />
                                <span>ƒê√¢y l√† t√™n c√¥ng ty, nh√≥m ho·∫∑c t·ªï ch·ª©c c·ªßa b·∫°n.</span>
                                <p>M√¥ t·∫£ kh√¥ng gian l√†m vi·ªác</p>
                                <textarea name="working_space" id rows={10} defaultValue={""} />
                                <span>ƒê∆∞a c√°c th√†nh vi√™n c·ªßa b·∫°n v√†o b·∫£ng v·ªõi m√¥ t·∫£ ng·∫Øn v·ªÅ Kh√¥ng gian l√†m vi·ªác c·ªßa b·∫°n.</span>
                            </form>
                        </div>
                        <div className="modal-footer">
                            <button type="button" className="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="button" className="btn btn-primary">Save changes</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}
